Index: WeatherSubject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- WeatherSubject.java	(revision )
+++ WeatherSubject.java	(revision )
@@ -0,0 +1,37 @@
+package com.example.simeon.cyclistpowerv3;
+
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+/**
+ * Created by Simeon on 24.12.2017.
+ */
+
+public class WeatherSubject  {
+    protected Set<ObserverW> observers=new HashSet<>();
+    WeatherData weatherData;
+    public void  addObserver(ObserverW observer){
+        observers.add(observer);
+    }
+    /*getting the weather Data*/
+    public  WeatherData getWeatherData(){
+        return this.weatherData;
+    }
+    /*setting the updated weatherData and notifies the observers*/
+    public void  setWeatherData(WeatherData weatherData){
+        this.weatherData=weatherData;
+        notifyObservers();
+    }
+    public void removeObserver(ObserverW observer){
+        this.observers.remove(observer);
+    }
+    /*the method for notifying the observers*/
+    public void notifyObservers(){
+        Iterator<ObserverW> observerIterator=observers.iterator();
+        while(observerIterator.hasNext()){
+            observerIterator.next().update();
+        }
+    }
+
+}
Index: CalculationData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CalculationData.java	(date 1514149201000)
+++ CalculationData.java	(revision )
@@ -8,7 +8,9 @@
  * Created by Simeon on 30.11.2017.
  */
 
-/*this is the class which use a specific strategy for  calculation of the  power*/
+/*this is the class which use a specific strategy for  calculation of the  power
+* it also combined the strategy pattern wiht the template pattern beacuse no maater of the way of
+* calculating the speed the calculation of the air density is same*/
 public class CalculationData {
     Cyclist cyclist;
     Location startLocation;
@@ -16,11 +18,15 @@
     int time;
     double simulatedSpeed;
     Random random = new Random();
-    public CalculationData(Cyclist cyclist, Location start,Location end, int time){
+    WeatherData weatherData;
+    double rho;
+    public CalculationData(Cyclist cyclist, Location start, Location end, int time, WeatherData renderweather){
         this.cyclist=cyclist;
         this.startLocation=start;
         this.endLocation=end;
         this.time=time;
+        weatherData=renderweather;
+        rho=calculateAirDensity(weatherData);
     }
     /*returns the combine weight of cyclist and bicycle*/
     private   double getCompaniedWeight(Cyclist cyclist){
@@ -28,8 +34,33 @@
     }
         /*here we choose one of the 2 possible strategies for calculation of the power*/
     Calculation calculation=new SimulatedSpeedCalculation();
+    public  double getPh(WeatherData weatherData){
+        return 6.1078/( 0.99999683+weatherData.getTemperature()* (-0.90826951 *Math.pow(10,-2)+(weatherData.getTemperature()*( 0.78736169 *Math.pow(10,-4)
+        +weatherData.getTemperature()*( -0.61117958*Math.pow(10,-6)+weatherData.getTemperature()*( 0.43884187*Math.pow(10,-8)+
+        weatherData.getTemperature()*(-0.29883885 *Math.pow(10,-10)+weatherData.getTemperature()*(0.21874425 *Math.pow(10,-12)+
+        weatherData.getTemperature()*(-0.17892321*Math.pow(10,-14)+weatherData.getTemperature()*(0.11112018 *Math.pow(10,-16)+
+        weatherData.getTemperature()*( -0.30994571*Math.pow(10,-19))))))))))));
+    }
+    public double getPV(WeatherData weatherData){
+        double d=( 0.99999683+weatherData.getDewPoint()* (-0.90826951 *Math.pow(10,-2)+(weatherData.getDewPoint()*( 0.78736169 *Math.pow(10,-4)
+                +weatherData.getDewPoint()*( -0.61117958*Math.pow(10,-6)+weatherData.getDewPoint()*( 0.43884187*Math.pow(10,-8)+
+                weatherData.getDewPoint()*(-0.29883885 *Math.pow(10,-10)+weatherData.getDewPoint()*(0.21874425 *Math.pow(10,-12)+
+                        weatherData.getDewPoint()*(-0.17892321*Math.pow(10,-14)+weatherData.getDewPoint()*(0.11112018 *Math.pow(10,-16)+
+                                weatherData.getDewPoint()*( -0.30994571*Math.pow(10,-19))))))))))));
+        double d1=1;
+        if(d!=0){}d1=d;
+        return 6.1078/d1;
+    }
+    public  double getPd(WeatherData weatherData){
+        return getPh(weatherData)-getPV(weatherData);
+    }
+    public  double calculateAirDensity(WeatherData weatherData){
+        double d=1;
+        if(getPd(weatherData)!=0){d=(getPd(weatherData)/(287.0531)*(weatherData.temperature+273.15))+(getPV(weatherData)/(461.4694*(weatherData.getTemperature()+273.15)));}
+        return  d;
+    }
     public  double getPower(){
-        return  this.calculation.calculatePower(cyclist,startLocation,endLocation,getCompaniedWeight(this.cyclist),time);
+        return  this.calculation.calculatePower(cyclist,startLocation,endLocation,getCompaniedWeight(this.cyclist),time,rho);
     }
     public double getSpeed(){
         return  this.calculation.getSpeed();}
Index: RealSpeedCalculation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- RealSpeedCalculation.java	(date 1514149201000)
+++ RealSpeedCalculation.java	(revision )
@@ -13,6 +13,7 @@
     double companiedWeight;
     double speed;
     int time;
+    private double rho;
 
     public RealSpeedCalculation() {
 
@@ -28,7 +29,7 @@
 
     /*calculate the dragForce*/
     private double Fdrag() {
-        return 0.5 * this.cyclist.getFrontalArea() * 1 * Math.pow(speed, 2);
+        return 0.5 * this.cyclist.getFrontalArea() * 1 * Math.pow(speed, 2)*rho;
     }
 
     /*calculate the distance*/
@@ -76,13 +77,14 @@
 
 
     @Override
-    public double calculatePower(Cyclist cyclist, Location startLocation, Location endLocation, double combainedWight, int time) {
+    public double calculatePower(Cyclist cyclist, Location startLocation, Location endLocation, double combainedWight, int time,double rho) {
         this.cyclist = cyclist;
         this.endLocation = endLocation;
         this.startLocation = startLocation;
         this.companiedWeight = combainedWight;
         this.time = time;
         this.speed = getSpeed(time);
+        this.rho=rho;
         return getCyclistPower();
     }
 
Index: PowerMeter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- PowerMeter.java	(date 1514149201000)
+++ PowerMeter.java	(revision )
@@ -11,6 +11,9 @@
 import com.google.firebase.database.DatabaseReference;
 import com.google.firebase.database.FirebaseDatabase;
 
+import org.json.JSONException;
+import org.json.JSONObject;
+
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.Date;
@@ -18,6 +21,9 @@
 import static java.lang.System.exit;
 
 public class PowerMeter extends AppCompatActivity {
+    public  double temperature;
+    public double pressure;
+    public double dewpoint;
     ArrayList<SingleMeasurment> listOfPowerMeasurments;
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -40,6 +46,7 @@
             LocationSubject locationSubject=new LocationSubject();
             locationSubject.setLocation(gpsTracker.getLocation());
             LocationObserver observer= new LocationObserver(locationSubject);
+            locationSubject.notifyObservers();
             startLocation = observer.getLocation();
             locationSubject.removeObserver(observer);
         }
@@ -49,6 +56,12 @@
         final Handler timerHandler=new Handler();
         final int i[]=new int [1];
         i[0]=0;
+
+
+        //test code for the jsonfile :P
+        final JSONObject json = RemoteFetch.getJSON(getApplicationContext(), "Skopje, MK");
+        final  WeatherData[] weatherData=new WeatherData[1];
+
         final Runnable timmerRunnable=new Runnable() {
             @Override
             public void run() {
@@ -57,15 +70,16 @@
                     LocationSubject locationSubject=new LocationSubject();
                     locationSubject.setLocation(gpsTracker.getLocation());
                     LocationObserver observer=new LocationObserver(locationSubject);
-                    Location currentLocation=observer.getLocation();
+                    locationSubject.notifyObservers();
+                    final Location currentLocation=observer.getLocation();
                     if(currentLocation!=null) {
                         ++i[0];
-                        Toast.makeText(getApplicationContext(), "text glup", Toast.LENGTH_LONG).show();
-                        CalculationData calculation = new CalculationData(cyclist, finalStartLocation, currentLocation, i[0]);
-                        editTextPower.setText(String.format("%.2f  W", calculation.getPower()));
-                        editTextSpeed.setText(String.format("%.2f  Km/h", calculation.getSpeed()));
-                        listOfPowerMeasurments.add(new SingleMeasurment(calculation.getPower(), cyclist.getUsername(), new Date(), calculation.getSpeed()));
-                        timerHandler.postDelayed(this, 1000);
+                        final CalculationData[] calculation = new CalculationData[1];
+                                calculation[0] = new CalculationData(cyclist, finalStartLocation, currentLocation, i[0], weatherData[0]);
+                            editTextPower.setText(String.format("%.2f  W", calculation[0].getPower()));
+                            editTextSpeed.setText(String.format("%.2f  Km/h", calculation[0].getSpeed()));
+                            listOfPowerMeasurments.add(new SingleMeasurment(calculation[0].getPower(), cyclist.getUsername(), new Date(), calculation[0].getSpeed()));
+                            timerHandler.postDelayed(this, 10000);
                     }
                 }
                 else{
@@ -76,8 +90,16 @@
         buttonStart.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                Toast.makeText(getApplicationContext(),"waiting for constructor",Toast.LENGTH_SHORT).show();
-                timerHandler.postDelayed(timmerRunnable,1000);
+                Toast.makeText(getApplicationContext(),"Calculating please be patitent",Toast.LENGTH_SHORT).show();
+                updateWeatherData("Skopje, MK");
+                weatherData[0]=new WeatherData(temperature,pressure,0);
+                WeatherSubject weatherSubject=new WeatherSubject();
+                weatherSubject.setWeatherData(weatherData[0]);
+                WeatherObserver observerW=new WeatherObserver(weatherSubject);
+                weatherSubject.notifyObservers();
+                weatherData[0]=observerW.getWeatherData();
+                Toast.makeText(getApplicationContext(), weatherData.toString(),Toast.LENGTH_LONG).show();
+                timerHandler.postDelayed(timmerRunnable,2000);
             }
         });
         buttonStop.setOnClickListener(new View.OnClickListener() {
@@ -85,10 +107,10 @@
             public void onClick(View view) {
                 timerHandler.removeCallbacks(timmerRunnable);
                 i[0]=0;
-                DatabaseReference databaseReference=FirebaseDatabase.getInstance().getReference();
+               /* DatabaseReference databaseReference=FirebaseDatabase.getInstance().getReference();
                 for(int i=0;i<listOfPowerMeasurments.size();i++) {
                     databaseReference.child("Measurments").child(cyclist.getUsername()).setValue(listOfPowerMeasurments.get(i));
-                }
+                }*/
                 }
         });
         Button buttonStatistics= findViewById(R.id.buttonStatistics);
@@ -101,8 +123,59 @@
                 startActivity(intent);
             }
         });
+        //getting the weater data via WeatherObserver*/
+        updateWeatherData("Skopje, MK");
+
+
+
 
         //Connecting to the weather
+    }
+    public void updateWeatherData(final String city){
+        final Handler handler=new Handler();
+        new Thread(){
+            public void run(){
+                final JSONObject json = RemoteFetch.getJSON(getApplicationContext(), city);
+                if(json == null){
+                    handler.post(new Runnable(){
+                        public void run(){
+                            Toast.makeText(getApplicationContext(),
+                                    "City not found",Toast.LENGTH_LONG).show();
+                        }
+                    });
+                } else {
+                    handler.post(new Runnable(){
+                        public void run(){
+                            try {
+                                renderWeather(json);
+                            } catch (JSONException e) {
+                                e.printStackTrace();
+                            }
+                        }
+                    });
+                }
+            }
+        }.start();
+    }
 
+    public void renderWeather(JSONObject json) throws JSONException {
+        JSONObject main=json.getJSONObject("main");
+        Toast.makeText(getApplicationContext(),main.getDouble("temp")+"C",Toast.LENGTH_LONG).show();
+        Toast.makeText(getApplicationContext(),main.getString("pressure")+"mb",Toast.LENGTH_LONG).show();
+        Toast.makeText(getApplicationContext(),main.getDouble("Dew point")+"",Toast.LENGTH_LONG).show();
+        temperature=main.getDouble("temperature");
+        pressure=Double.parseDouble(main.getString("pressure"));
+        dewpoint= main.getDouble("dew_point");
     }
+    public WeatherData renderweather(JSONObject json) throws JSONException {
+        JSONObject main=json.getJSONObject("main");
+        Toast.makeText(getApplicationContext(),main.getDouble("temp")+"C",Toast.LENGTH_LONG).show();
+        Toast.makeText(getApplicationContext(),main.getString("pressure")+"mb",Toast.LENGTH_LONG).show();
+        Toast.makeText(getApplicationContext(),main.getDouble("Dew point")+"",Toast.LENGTH_LONG).show();
+        temperature=main.getDouble("temperature");
+        pressure=Double.parseDouble(main.getString("pressure"));
+        dewpoint= main.getDouble("dew_point");
+        return new WeatherData(temperature,pressure,0);
+    }
+
 }
Index: CyclistSettingsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CyclistSettingsActivity.java	(date 1514149201000)
+++ CyclistSettingsActivity.java	(revision )
@@ -20,9 +20,15 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import org.json.JSONException;
+import org.json.JSONObject;
+
 import java.util.ArrayList;
 
 public class CyclistSettingsActivity extends AppCompatActivity {
+        double temperature;
+        double pressure;
+        double dewpoint;
 
     final Cyclist[] cyclist = new Cyclist[1];
     private BottomNavigationView.OnNavigationItemSelectedListener mOnNavigationItemSelectedListener
@@ -35,7 +41,8 @@
                     return true;
                 case R.id.navigation_PowerMeter:
                    Intent intent=new Intent(getApplicationContext(),PowerMeter.class);
-                   intent.putExtra("Cyclist",cyclist[0]);
+                    Toast.makeText(getApplicationContext(),cyclist.toString(),Toast.LENGTH_SHORT).show();
+                    intent.putExtra("Cyclist",cyclist[0]);
                    startActivity(intent);
                     }
             return false;
@@ -48,12 +55,12 @@
         setContentView(R.layout.activity_cyclist_settings);
         final int []possP=new int[3];
         final int [] possR=new int[3];
-        final BottomNavigationView navigation = (BottomNavigationView) findViewById(R.id.navigation);
+        final BottomNavigationView navigation = findViewById(R.id.navigation);
         navigation.setOnNavigationItemSelectedListener(mOnNavigationItemSelectedListener);
-        EditText userNameText=(EditText) findViewById(R.id.editTextUserName);
+        EditText userNameText= findViewById(R.id.editTextUserName);
         final String userName=this.getIntent().getStringExtra("username");
         userNameText.setText(userName);
-        Spinner spinner=(Spinner) findViewById(R.id.spinnerRoad);
+        Spinner spinner= findViewById(R.id.spinnerRoad);
         final ArrayList<String> listroads=new ArrayList<>();
         listroads.add("concrete");
         listroads.add("asphalt");
@@ -77,7 +84,7 @@
 
             }
         });
-        Spinner spinnerPosition=(Spinner) findViewById(R.id.spinnerPosition);
+        Spinner spinnerPosition= findViewById(R.id.spinnerPosition);
         final ArrayList<String> positionsfa=new ArrayList<>();
         positionsfa.add("Tops");
         positionsfa.add("Hoods");
@@ -102,13 +109,13 @@
 
             }
         });
-        Spinner spinnerB=(Spinner) findViewById(R.id.spinnerBycicle);
+        Spinner spinnerB= findViewById(R.id.spinnerBycicle);
         final ArrayList<String> types=new ArrayList<>();
         types.add("Standard Bycicle"); types.add("Mountain Bycicle"); types.add("Sport Bycicle");
         ArrayAdapter<String> arrayAdapter=new ArrayAdapter<String>(getApplicationContext(),android.R.layout.simple_list_item_1,types);
         spinnerB.setAdapter(arrayAdapter);
         final int sBind[]=new int[1];
-        final EditText bycicleWeidhtText=(EditText) findViewById(R.id.editTextBycicleWeight);
+        final EditText bycicleWeidhtText= findViewById(R.id.editTextBycicleWeight);
         spinnerB.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
             @Override
             public void onItemSelected(AdapterView<?> adapterView, View view, int position, long l) {
@@ -125,19 +132,23 @@
 
             }
         });
+        final EditText userWeightText= findViewById(R.id.editTextUserWeight);
+        cyclist[0].setBycicleWeight(Double.parseDouble(bycicleWeidhtText.getText().toString()));
+        cyclist[0].setUserweight(Double.parseDouble(userWeightText.getText().toString()));
         bycicleWeidhtText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
             @Override
             public void onFocusChange(View view, boolean b) {
                 cyclist[0].setBycicleWeight(Double.parseDouble(bycicleWeidhtText.getText().toString()));
             }
         });
-        final EditText userWeightText=(EditText) findViewById(R.id.editTextUserWeight);
         userWeightText.setOnFocusChangeListener(new View.OnFocusChangeListener() {
             @Override
             public void onFocusChange(View view, boolean b) {
                 cyclist[0].setUserweight(Double.parseDouble(userWeightText.getText().toString()));
             }
         });
+        //data weather manupilation*/
+
         //Button button=(Button) findViewById(R.id.buttonCycle);
       /* button.setOnClickListener(new View.OnClickListener() {
            @Override
@@ -147,8 +158,9 @@
                cyclist[0] =new Cyclist(bWeight,uWeight,cdA[0],userName,dragCoefficient[0]);
            }
        });*/
+        Toast.makeText(getApplicationContext(),cyclist.toString(),Toast.LENGTH_SHORT).show();
+    }
 
 
-    }
 
 }
Index: SimulatedSpeedCalculation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SimulatedSpeedCalculation.java	(date 1514149201000)
+++ SimulatedSpeedCalculation.java	(revision )
@@ -16,6 +16,7 @@
     double companiedWeight;
     double speed;
     int time;
+    double rho;
 
     public  SimulatedSpeedCalculation(){
 
@@ -31,24 +32,24 @@
     }
 
     public  double getSimSpeed() {
-        double mSpeed = 5;
+        double mSpeed=0;
         if (first) {
-            mSpeed = random.nextInt(15);
+            mSpeed = random.nextInt(4);
             first = false;
         } else {
             if (isPlus) {
-                int temp = random.nextInt(5);
-                if (mSpeed + temp < 30) {
-                    mSpeed += temp;
+                int temp = random.nextInt(2);
+                if (mSpeed + (temp%2) < 15) {
+                    mSpeed += temp%2;
                 } else {
                     mSpeed += 0;
                 }
                 isPlus = true;
             }
             if (!isPlus) {
-                int temp = random.nextInt(5);
-                if (mSpeed - temp > 0) {
-                    mSpeed -= temp;
+                int temp = random.nextInt(2);
+                if (mSpeed - (temp%2) > 0) {
+                    mSpeed -= temp%2;
                 } else {
                     mSpeed += 0;
                 }
@@ -61,7 +62,7 @@
 
     /*calculate the dragForce*/
     private double Fdrag(){
-        return 0.5 * this.cyclist.getFrontalArea()*1* Math.pow(this.speed,2);
+        return 0.5 * this.cyclist.getFrontalArea()*1* Math.pow(this.speed,2)*rho;
     }
     /*calculate the distance*/
     public  double getDistance(Location start, Location end){
@@ -91,7 +92,7 @@
     }
     /*the cyclist speed*/
     public double getCyclistSpeed(){
-        return this.speed;
+        return getSimSpeed();
     }
     /*the altitude*/
     public  double getAltitude(){
@@ -100,13 +101,14 @@
 
 
     @Override
-    public double calculatePower(Cyclist cyclist, Location startLocation, Location endLocation, double combainedWight,int time) {
+    public double calculatePower(Cyclist cyclist, Location startLocation, Location endLocation, double combainedWight,int time,double rho) {
         this.cyclist=cyclist;
         this.endLocation=endLocation;
         this.startLocation=startLocation;
         this.companiedWeight=combainedWight;
         this.time=time;
         this.speed=getSimSpeed();
+        this.rho=rho;
         return getCyclistPower();
     }
 
Index: RemoteFetch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- RemoteFetch.java	(date 1514149201000)
+++ RemoteFetch.java	(revision )
@@ -17,7 +17,8 @@
 
         import android.content.Context;
         import android.util.Log;
-
+import android.widget.Toast;
+/*class for connecting to the weather with json*/
 public class RemoteFetch {
 
     private static final String OPEN_WEATHER_MAP_API =
Index: WeatherObserver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- WeatherObserver.java	(revision )
+++ WeatherObserver.java	(revision )
@@ -0,0 +1,23 @@
+package com.example.simeon.cyclistpowerv3;
+
+/**
+ * Created by Simeon on 24.12.2017.
+ */
+
+public class WeatherObserver extends ObserverW {
+     WeatherData weatherData;
+     public WeatherObserver(){}
+     public WeatherObserver(WeatherSubject weatherSubject){
+        this.weatherSubject=weatherSubject;
+weatherSubject.addObserver(this);
+     }
+
+    @Override
+    public void update() {
+     this.weatherData=weatherSubject.getWeatherData();
+    }
+
+    public WeatherData getWeatherData() {
+        return this.weatherData;
+    }
+}
Index: ObserverW.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ObserverW.java	(revision )
+++ ObserverW.java	(revision )
@@ -0,0 +1,10 @@
+package com.example.simeon.cyclistpowerv3;
+
+/**
+ * Created by Simeon on 24.12.2017.
+ */
+/* abstract class for observer of weather data */
+public abstract class ObserverW {
+    WeatherSubject weatherSubject;
+    public abstract void update();
+}
Index: Calculation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Calculation.java	(date 1514149201000)
+++ Calculation.java	(revision )
@@ -7,6 +7,6 @@
  */
 
 public interface Calculation {
-    public double calculatePower(Cyclist cyclist, Location startLocation, Location endLocation, double combainedWight,int time);
-    public double getSpeed();
+    double calculatePower(Cyclist cyclist, Location startLocation, Location endLocation, double combainedWight, int time, double rho);
+    double getSpeed();
 }
Index: LocationObserver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LocationObserver.java	(date 1514149201000)
+++ LocationObserver.java	(revision )
@@ -10,6 +10,7 @@
  */
 public class LocationObserver extends Observer {
     Location location;
+    public LocationObserver(){}
     public LocationObserver(LocationSubject subject){
         this.locationSubject=subject;
         this.locationSubject.addObserver(this);
Index: WeatherData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- WeatherData.java	(revision )
+++ WeatherData.java	(revision )
@@ -0,0 +1,44 @@
+package com.example.simeon.cyclistpowerv3;
+
+/**
+ * Created by Simeon on 24.12.2017.
+ */
+
+public class WeatherData {
+    double temperature;
+    double airpresure;
+    double dewPoint;
+    public WeatherData(double temperature,double humidity,double dewPoint){
+        this.dewPoint=dewPoint;
+        this.airpresure=humidity;
+        this.temperature=temperature;
+    }
+     public  WeatherData(){}
+    public double getTemperature() {
+        return temperature;
+    }
+
+    public void setTemperature(double temperature) {
+        this.temperature = temperature;
+    }
+
+    public double getAirpresure() {
+        return airpresure;
+    }
+
+    public void setAirpresure(double airpresure) {
+        this.airpresure = airpresure;
+    }
+
+    public double getDewPoint() {
+        return dewPoint;
+    }
+
+    public void setDewPoint(double dewPoint) {
+        this.dewPoint = dewPoint;
+    }
+    @Override
+    public  String toString(){
+        return String.format("Temperature" + temperature +"C" + "\n" + "Air Pressure:"+airpresure +"hpa"+"\n"+"Dew Point" +dewPoint);
+    }
+}
